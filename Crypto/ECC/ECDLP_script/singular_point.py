
# cusp 
p =  311952315593876601525424211513722441271 
a = 159845783259537188142355147797068077874
b = 39057121666577550141327036767256925333
c = 15925534427268029357918546544798531073 
P.<x,y> = GF(p)[] 
f = x^3 - a*x^2 - b*x - c 
C = Curve(-f + y^2) 
singular_point = C.singular_points()[0]
x0 = singular_point[0]
f_ = f.subs(x=x+x0) 
# F_.factor() = x^3
P = (GF(p)(1 - x0), GF(p)(243622947764458866080767105658181708140L))
Q = (GF(p)(84991494492557796583169574861184612623L - x0), GF(p)(267550138715401980032341281306553030746L)) 
P_ = P[0] / P[1] 
Q_ = Q[0] / Q[1] 
d = Q_ / P_
print "1", d 


# node 
p =  323688000009964594744381603830748041047 
a = 171364691900285586608240018679910356312
P.<x,y> = GF(p)[]
f = x^3 + 77462322662311316928723943629874028456L * x^2 
t = GF(p)(77462322662311316928723943629874028456L).square_root()
P = (GF(p)(1), GF(p)(271100633406259477811208609825509465453L - a/2))
Q = (GF(p)(240019630331977394766094211844812030488L), GF(p)(12085533283494288676997901316633811830L - 240019630331977394766094211844812030488L * a/2))
u = (P[1] + t*P[0])/(P[1] - t*P[0]) % p
v = (Q[1] + t*Q[0])/(Q[1] - t*Q[0]) % p
print discrete_log(v, u)
