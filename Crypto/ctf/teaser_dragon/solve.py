# from gmpy2 import gcd, invert 
import os 
# import gmpy2 
from hensel import * 

def gcd(int1,int2):
    min_int = min(int1,int2)
    max_int = max(int1,int2)

    remainder = max_int%min_int
  
    if remainder == 0:
        return min_int
    else:
        return gcd(min_int,remainder)

f = open("output.txt", "r") 
data = f.read().split("\n") 
for i in range(4) : 
    data[i] = map(int, data[i].split(" ")[1:])  
r = gcd(data[1][0], data[0][0]) 
"""
n = 1311485515090222718982495198730831073955174624382380405255882886012541076751694096664143914783345786808989030195914045177845164364400711539537456739170589346033729436625658871146633553503774866142568716068953663977222002088477902235884717082069070796901652820969777833174034685816622756524282480580399883160755030115364291412718061758142515305389808681261201028647918631486855998332674824264495109641835596608336454102370944531225289276734441189842117114187272485368222698210402692987316946307402124818683662256285425749745044473836534317911693431019535047343774304237969249813708212575639444584092633692220540287380100087406907
d0 = 5707521170224254508659672846933818787001135802176783947179706231070761518271823668313158008289673444516064588686080249076540588375157043626677419185625336049313314641249542595200886768114306555416909136568265340888067484302848785272525288608839874074236050840506402897831477010251518458186504962395384666969171250107 
"""
"""
p1 = 282595361018796512312481928903796535047168039821441204226899357708165480989181288601210607191471483534037953052604722708819774231230476577951670676743338887609132820418468389978419501153422449272224388422022777
q1 = 142270506848638924547091203976235495577725242858694711068289574174127601000137457280276860615471044907560710121669055364010408768146949985099404319539891688093875478389341632242096859500255283810703767020918479
k = 877 
p2 = 291668652611471250039066078554824884845341136873092210122454888337748213391694969640183343019452438800975699247613989121123985462360872265327833435184781051854777074884190706087067889456284908187292126902073849
q2 = 90298557884682577669238320760096423994217812898822512514104930945042122418007925771281125855142645396913218673571816112036657123492733042972301983242487835472292994595416656844378721884370309120262139835889657
k = 1041 
p3 = 267307309343866797026967908679365544381223264502857628608660439661084648014195234872217075156454448820508389018205344581075300847474799458610853350116251989700007053821013120164193801622760845268409925117073227
p4 = 188689169745401648234984799686937623590015544678958930140026860499157441295507274434268349194461155162481283679350641089523071656015001291946438485044113564467435184782104140072331748380561726605546500856968771



""" 
print r 
print data[0][0]
print data[0][1]


def genPrime(bits):
    data = os.urandom(bits/8)
    number = int(data.encode("hex"), 16)
    return gmpy2.next_prime(number)

"""1
e = 1667 
n = data[2][0]
d0 = data[2][1] 
a1 = e * d0
a2_ = (r-1) * n / r 
a3_ = (r-1) 
mod = 2 ^ 1050
k = 1 
found = False 
while not found :   
    print k 
    a2 = k * a2_ 
    a3 = k * a3_ 
    # results = solve_mod([e * d0 * X - a2*(X-1) + a3 * X*(X-1)  == X], mod)
    coeffs  = [a3, e*d0 - a2 - a3 - 1, a2] 
    f = Polynomial(coeffs )
    for p0 in Hensel(f, 2, 701, coeffs) :  
        if n % p0 == 0 : 
            print p0 
            found = True   
    k += 1 
""" 

e = 1667 
n = data[2][0]
d0 = data[2][1] 

k = 1 
found = False 
while not found :   
    print k 
    # results = solve_mod([e * d0 * X - a2*(X-1) + a3 * X*(X-1)  == X], mod)
    coeffs  = [k, -k, e * d0 - k*n -1, k *n] 
    f = Polynomial(coeffs )
    for p0 in Hensel(f, 2, 701, coeffs) :  
        if n % p0 == 0 : 
            print p0 
            found = True   
    k += 1 

"""
e = 1667 
n = data[3][0]
d0 = data[3][1] 

k = 1 
found = False 
while not found :   
    print k 
    # results = solve_mod([e * d0 * X - a2*(X-1) + a3 * X*(X-1)  == X], mod)
    coeffs  = [k, e*d0 - k*n - k - 1, k *n] 
    f = Polynomial(coeffs )
    for p0 in Hensel(f, 2, 701, coeffs) :  
        if n % p0 == 0 : 
            print p0 
            found = True   
    k += 1 
"""

"""
#r = 32619972550448885952992763634430245734911201344234854263395196070105784406551510361671421185736962007609664176708457560859146461127127352439294740476944600948487063407599124272043110271125538616418873138407229
#n = 1311485515090222718982495198730831073955174624382380405255882886012541076751694096664143914783345786808989030195914045177845164364400711539537456739170589346033729436625658871146633553503774866142568716068953663977222002088477902235884717082069070796901652820969777833174034685816622756524282480580399883160755030115364291412718061758142515305389808681261201028647918631486855998332674824264495109641835596608336454102370944531225289276734441189842117114187272485368222698210402692987316946307402124818683662256285425749745044473836534317911693431019535047343774304237969249813708212575639444584092633692220540287380100087406907
#d0 = 6762547460602241256253304403057840010356965995658332151464306076734886668348338229477220486851971695831025738065540621944954803087639187605826246170852109559079074614119808221929013953607066074389809368603757307759386199129306765569186327590211123849053154881101151177686828760168745679159348065176015209027306930795  
p = genPrime(700) 
q = genPrime(700) 
r = genPrime(700) 
e = 1667
n = p * q * r
phi = (p-1) * (q-1) * (r-1)  
d = invert(e, phi)
# X = var('X')

k = (e * d - 1) / phi 
print n 
print k 
print r 
d0 = d % 2**1050
print d0 """

"""
X = var('X')
P.<x> = PolynomialRing(Zmod(n))
print '[ ] Thinking...'

#print k  
a1 = e * d0
a2 = k *(r-1) * n / r 
a3 = k * (r-1) 
mod = 2 ^ 1050 
for k in range(1, e + 1) : 
    print k 
    results = solve_mod([e * d0 * X - a2*(X-1) + a3 * X*(X-1)  == X], mod)

    for p0 in results :  
        if n % ZZ(p0[0]) == 0 :  
            print p0  
            break
""" 
"""
X = var('X')
P.<x> = PolynomialRing(Zmod(n))
print '[ ] Thinking...'

#print k  

results = solve_mod([e * d0 * X - k *(n * X - X**2 - n + X) == X], 2 ^ 1050)

for p0 in results :  
    if n % ZZ(p0[0]) == 0 :  
        print p0  
        break  """

"""
X = var('X')
P.<x> = PolynomialRing(Zmod(n))
print '[ ] Thinking...'

#print k  

results = solve_mod([e * d0 * X**2 - k *(n - X**2) * (X - 1) * X == X**2], 2 ^ 1050)

for p0 in results :  
    if p0[0] == 0 : 
        continue 
    if n % ZZ(p0[0]) == 0 :  
        print p0  
        break """  

